// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rating.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const averageProductRatingForSpecificProduct = `-- name: AverageProductRatingForSpecificProduct :one
SELECT AVG(rating_value) as average_value
FROM rating
WHERE pd_id = $1 AND deleted_at IS NULL
`

func (q *Queries) AverageProductRatingForSpecificProduct(ctx context.Context, pdID sql.NullInt64) (float64, error) {
	row := q.db.QueryRowContext(ctx, averageProductRatingForSpecificProduct, pdID)
	var average_value float64
	err := row.Scan(&average_value)
	return average_value, err
}

const createRating = `-- name: CreateRating :one
INSERT INTO rating (
    liked,rating_value, pd_id, usr_id
) VALUES (
             $1 , $2 , $3 , $4
         )
RETURNING rating_id, created_at, updated_at, deleted_at, rating_value, liked, comment, pd_id, usr_id
`

type CreateRatingParams struct {
	Liked       sql.NullBool   `json:"liked"`
	RatingValue sql.NullString `json:"rating_value"`
	PdID        sql.NullInt64  `json:"pd_id"`
	UsrID       sql.NullInt64  `json:"usr_id"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating,
		arg.Liked,
		arg.RatingValue,
		arg.PdID,
		arg.UsrID,
	)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.Liked,
		&i.Comment,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const getRatingForSpecificProductForSpecificUser = `-- name: GetRatingForSpecificProductForSpecificUser :one
SELECT rating_id, created_at, updated_at, deleted_at, rating_value, liked, comment, pd_id, usr_id FROM rating
where usr_id = $1 AND pd_id = $2
`

type GetRatingForSpecificProductForSpecificUserParams struct {
	UsrID sql.NullInt64 `json:"usr_id"`
	PdID  sql.NullInt64 `json:"pd_id"`
}

func (q *Queries) GetRatingForSpecificProductForSpecificUser(ctx context.Context, arg GetRatingForSpecificProductForSpecificUserParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRatingForSpecificProductForSpecificUser, arg.UsrID, arg.PdID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.Liked,
		&i.Comment,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const listLikedProductsForSpecificUser = `-- name: ListLikedProductsForSpecificUser :many
SELECT
    rating.rating_id,
    rating.comment,
    rating.rating_value,
    rating.updated_at,
    rating.liked,
    product.pd_name,
    product.short_description,
    image. img_name,
    image.img_url,
    image.alt_text,
    category.category_name,
    rating.usr_id
FROM rating
JOIN product ON rating.pd_id = product.pd_id
JOIN image ON product.img_id = image.img_id
JOIN category ON product.category_id = category.category_id
WHERE rating.liked = true AND rating.usr_id = $1 AND rating.deleted_at IS NULL
ORDER BY rating.updated_at DESC
LIMIT $2
OFFSET $3
`

type ListLikedProductsForSpecificUserParams struct {
	UsrID  sql.NullInt64 `json:"usr_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

type ListLikedProductsForSpecificUserRow struct {
	RatingID         int64          `json:"rating_id"`
	Comment          sql.NullString `json:"comment"`
	RatingValue      sql.NullString `json:"rating_value"`
	UpdatedAt        time.Time      `json:"updated_at"`
	Liked            sql.NullBool   `json:"liked"`
	PdName           string         `json:"pd_name"`
	ShortDescription sql.NullString `json:"short_description"`
	ImgName          sql.NullString `json:"img_name"`
	ImgUrl           sql.NullString `json:"img_url"`
	AltText          sql.NullString `json:"alt_text"`
	CategoryName     string         `json:"category_name"`
	UsrID            sql.NullInt64  `json:"usr_id"`
}

func (q *Queries) ListLikedProductsForSpecificUser(ctx context.Context, arg ListLikedProductsForSpecificUserParams) ([]ListLikedProductsForSpecificUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listLikedProductsForSpecificUser, arg.UsrID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLikedProductsForSpecificUserRow{}
	for rows.Next() {
		var i ListLikedProductsForSpecificUserRow
		if err := rows.Scan(
			&i.RatingID,
			&i.Comment,
			&i.RatingValue,
			&i.UpdatedAt,
			&i.Liked,
			&i.PdName,
			&i.ShortDescription,
			&i.ImgName,
			&i.ImgUrl,
			&i.AltText,
			&i.CategoryName,
			&i.UsrID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserLikeStatus = `-- name: ListUserLikeStatus :many
SELECT rating_id, created_at, updated_at, deleted_at, rating_value, liked, comment, pd_id, usr_id FROM rating
WHERE liked = true AND deleted_at IS NULL
ORDER BY pd_id
LIMIT $1
OFFSET $2
`

type ListUserLikeStatusParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserLikeStatus(ctx context.Context, arg ListUserLikeStatusParams) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listUserLikeStatus, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.RatingID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.RatingValue,
			&i.Liked,
			&i.Comment,
			&i.PdID,
			&i.UsrID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numberOfProductRating = `-- name: NumberOfProductRating :one
SELECT COUNT(rating_value) as number_of_ratting
FROM rating
WHERE pd_id = $1
`

func (q *Queries) NumberOfProductRating(ctx context.Context, pdID sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, numberOfProductRating, pdID)
	var number_of_ratting int64
	err := row.Scan(&number_of_ratting)
	return number_of_ratting, err
}

const updateRating = `-- name: UpdateRating :one
UPDATE rating
SET rating_value = $1,
    liked = $2,
    comment = $3,
    updated_at = now()
WHERE usr_id = $4 AND pd_id= $5 AND deleted_at IS NULL
RETURNING  rating_id, created_at, updated_at, deleted_at, rating_value, liked, comment, pd_id, usr_id
`

type UpdateRatingParams struct {
	RatingValue sql.NullString `json:"rating_value"`
	Liked       sql.NullBool   `json:"liked"`
	Comment     sql.NullString `json:"comment"`
	UsrID       sql.NullInt64  `json:"usr_id"`
	PdID        sql.NullInt64  `json:"pd_id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, updateRating,
		arg.RatingValue,
		arg.Liked,
		arg.Comment,
		arg.UsrID,
		arg.PdID,
	)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.Liked,
		&i.Comment,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}
