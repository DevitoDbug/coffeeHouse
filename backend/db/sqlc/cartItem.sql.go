// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cartItem.sql

package db

import (
	"context"
	"database/sql"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_item (
    quantity , product_variant_id , cart_id
) VALUES (
             $1 , $2 , $3
         )
RETURNING cart_item_id, created_at, updated_at, quantity, product_variant_id, cart_id
`

type CreateCartItemParams struct {
	Quantity         sql.NullInt32 `json:"quantity"`
	ProductVariantID sql.NullInt64 `json:"product_variant_id"`
	CartID           sql.NullInt64 `json:"cart_id"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, createCartItem, arg.Quantity, arg.ProductVariantID, arg.CartID)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Quantity,
		&i.ProductVariantID,
		&i.CartID,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_item
WHERE cart_item_id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, cartItemID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, cartItemID)
	return err
}

const getCartItem = `-- name: GetCartItem :one
SELECT cart_item_id, created_at, updated_at, quantity, product_variant_id, cart_id FROM cart_item
WHERE cart_item_id = $1
`

func (q *Queries) GetCartItem(ctx context.Context, cartItemID int64) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, cartItemID)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Quantity,
		&i.ProductVariantID,
		&i.CartID,
	)
	return i, err
}

const listCartItemForSpecificCart = `-- name: ListCartItemForSpecificCart :many
SELECT cart_item_id, created_at, updated_at, quantity, product_variant_id, cart_id FROM cart_item
WHERE cart_id = $1
ORDER BY product_variant_id, cart_item.created_at DESC
LIMIT $2
OFFSET $3
`

type ListCartItemForSpecificCartParams struct {
	CartID sql.NullInt64 `json:"cart_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListCartItemForSpecificCart(ctx context.Context, arg ListCartItemForSpecificCartParams) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, listCartItemForSpecificCart, arg.CartID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.CartItemID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Quantity,
			&i.ProductVariantID,
			&i.CartID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE cart_item
SET quantity = $1 ,updated_at = now()
WHERE cart_item_id = $2
RETURNING  cart_item_id, created_at, updated_at, quantity, product_variant_id, cart_id
`

type UpdateCartItemQuantityParams struct {
	Quantity   sql.NullInt32 `json:"quantity"`
	CartItemID int64         `json:"cart_item_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartItemQuantity, arg.Quantity, arg.CartItemID)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Quantity,
		&i.ProductVariantID,
		&i.CartID,
	)
	return i, err
}
