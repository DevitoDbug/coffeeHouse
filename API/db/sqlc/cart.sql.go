// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart.sql

package db

import (
	"context"
	"database/sql"
)

const createCart = `-- name: CreateCart :one
INSERT INTO "cart" (
                    usr_id
) VALUES (
             $1
         )
RETURNING cart_id, created_at, updated_at, usr_id
`

func (q *Queries) CreateCart(ctx context.Context, usrID sql.NullInt64) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, usrID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsrID,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :one
DELETE FROM "cart" WHERE cart_id = $1 RETURNING cart_id, created_at, updated_at, usr_id
`

func (q *Queries) DeleteCart(ctx context.Context, cartID int64) (Cart, error) {
	row := q.db.QueryRowContext(ctx, deleteCart, cartID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsrID,
	)
	return i, err
}

const getCarts = `-- name: GetCarts :one
SELECT cart_id, created_at, updated_at, usr_id FROM "cart"
WHERE cart_id = $1
`

func (q *Queries) GetCarts(ctx context.Context, cartID int64) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCarts, cartID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsrID,
	)
	return i, err
}

const listCarts = `-- name: ListCarts :many
SELECT cart_id, created_at, updated_at, usr_id FROM "cart"
ORDER BY usr_id
LIMIT $1
OFFSET $2
`

type ListCartsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCarts(ctx context.Context, arg ListCartsParams) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listCarts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.CartID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsrID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
