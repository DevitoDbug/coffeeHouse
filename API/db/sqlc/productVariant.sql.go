// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: productVariant.sql

package db

import (
	"context"
	"database/sql"
)

const createProductVariant = `-- name: CreateProductVariant :one
INSERT INTO "product_variant" (
                               price, pd_id , att_id
) VALUES (
             $1 , $2 , $3
         )
RETURNING product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

type CreateProductVariantParams struct {
	Price string        `json:"price"`
	PdID  sql.NullInt64 `json:"pd_id"`
	AttID sql.NullInt64 `json:"att_id"`
}

func (q *Queries) CreateProductVariant(ctx context.Context, arg CreateProductVariantParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, createProductVariant, arg.Price, arg.PdID, arg.AttID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const deleteProductVariant = `-- name: DeleteProductVariant :one
DELETE FROM "product_variant" WHERE product_variant_id = $1 RETURNING product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

func (q *Queries) DeleteProductVariant(ctx context.Context, productVariantID int64) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, deleteProductVariant, productVariantID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const deleteProductVariantTemporarily = `-- name: DeleteProductVariantTemporarily :one
UPDATE "product_variant"
SET deleted_at = now()
WHERE product_variant_id = $1 AND deleted_at IS NULL
RETURNING  product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

func (q *Queries) DeleteProductVariantTemporarily(ctx context.Context, productVariantID int64) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, deleteProductVariantTemporarily, productVariantID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const listProductsVariant = `-- name: ListProductsVariant :many
SELECT product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id FROM "product_variant"
WHERE deleted_at IS NULL
ORDER BY pd_id
LIMIT $1
OFFSET $2
`

type ListProductsVariantParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductsVariant(ctx context.Context, arg ListProductsVariantParams) ([]ProductVariant, error) {
	rows, err := q.db.QueryContext(ctx, listProductsVariant, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductVariant
	for rows.Next() {
		var i ProductVariant
		if err := rows.Scan(
			&i.ProductVariantID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Price,
			&i.PdID,
			&i.AttID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreProductVariant = `-- name: RestoreProductVariant :one
UPDATE "product_variant"
SET deleted_at = NULL
WHERE product_variant_id = $1 AND deleted_at IS NOT NULL
RETURNING  product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

func (q *Queries) RestoreProductVariant(ctx context.Context, productVariantID int64) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, restoreProductVariant, productVariantID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const updateProductVariantAttId = `-- name: UpdateProductVariantAttId :one
UPDATE "product_variant"
SET att_id = $2, updated_at = now()
WHERE product_variant_id = $1 AND deleted_at IS NULL
RETURNING  product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

type UpdateProductVariantAttIdParams struct {
	ProductVariantID int64         `json:"product_variant_id"`
	AttID            sql.NullInt64 `json:"att_id"`
}

func (q *Queries) UpdateProductVariantAttId(ctx context.Context, arg UpdateProductVariantAttIdParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, updateProductVariantAttId, arg.ProductVariantID, arg.AttID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const updateProductVariantPdId = `-- name: UpdateProductVariantPdId :one
UPDATE "product_variant"
SET pd_id = $2, updated_at = now()
WHERE product_variant_id = $1 AND deleted_at IS NULL
RETURNING  product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

type UpdateProductVariantPdIdParams struct {
	ProductVariantID int64         `json:"product_variant_id"`
	PdID             sql.NullInt64 `json:"pd_id"`
}

func (q *Queries) UpdateProductVariantPdId(ctx context.Context, arg UpdateProductVariantPdIdParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, updateProductVariantPdId, arg.ProductVariantID, arg.PdID)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}

const updateProductVariantPrice = `-- name: UpdateProductVariantPrice :one
UPDATE "product_variant"
SET price = $2, updated_at = now()
WHERE product_variant_id = $1 AND deleted_at IS NULL
RETURNING  product_variant_id, created_at, updated_at, deleted_at, price, pd_id, att_id
`

type UpdateProductVariantPriceParams struct {
	ProductVariantID int64  `json:"product_variant_id"`
	Price            string `json:"price"`
}

func (q *Queries) UpdateProductVariantPrice(ctx context.Context, arg UpdateProductVariantPriceParams) (ProductVariant, error) {
	row := q.db.QueryRowContext(ctx, updateProductVariantPrice, arg.ProductVariantID, arg.Price)
	var i ProductVariant
	err := row.Scan(
		&i.ProductVariantID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Price,
		&i.PdID,
		&i.AttID,
	)
	return i, err
}
