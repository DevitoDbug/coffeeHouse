// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customerOrder.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomerOrder = `-- name: CreateCustomerOrder :one
INSERT INTO customer_order (
    usr_id
) VALUES (
             $1
         )
RETURNING customer_order_id, created_at, usr_id
`

func (q *Queries) CreateCustomerOrder(ctx context.Context, usrID sql.NullInt64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, createCustomerOrder, usrID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const deleteCustomerOrder = `-- name: DeleteCustomerOrder :one
DELETE FROM customer_order WHERE customer_order_id = $1 RETURNING customer_order_id, created_at, usr_id
`

func (q *Queries) DeleteCustomerOrder(ctx context.Context, customerOrderID int64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, deleteCustomerOrder, customerOrderID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const getSpecificCustomerOrder = `-- name: GetSpecificCustomerOrder :one
SELECT customer_order_id, created_at, usr_id FROM customer_order
WHERE usr_id = $1
ORDER BY created_at
`

func (q *Queries) GetSpecificCustomerOrder(ctx context.Context, usrID sql.NullInt64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, getSpecificCustomerOrder, usrID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const listCustomerOrders = `-- name: ListCustomerOrders :many
SELECT customer_order_id, created_at, usr_id FROM customer_order
ORDER BY usr_id, created_at
LIMIT $1
OFFSET $2
`

type ListCustomerOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomerOrders(ctx context.Context, arg ListCustomerOrdersParams) ([]CustomerOrder, error) {
	rows, err := q.db.QueryContext(ctx, listCustomerOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerOrder
	for rows.Next() {
		var i CustomerOrder
		if err := rows.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
