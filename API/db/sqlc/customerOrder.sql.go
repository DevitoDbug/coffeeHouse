// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customerOrder.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO customer_order (
    usr_id
) VALUES (
             $1
         )
RETURNING customer_order_id, created_at, usr_id
`

func (q *Queries) CreateOrder(ctx context.Context, usrID sql.NullInt64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, createOrder, usrID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :one
DELETE FROM customer_order WHERE customer_order_id = $1 RETURNING customer_order_id, created_at, usr_id
`

func (q *Queries) DeleteOrder(ctx context.Context, customerOrderID int64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, deleteOrder, customerOrderID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const getSpecificOrder = `-- name: GetSpecificOrder :one
SELECT customer_order_id, created_at, usr_id FROM customer_order
WHERE usr_id = $1
`

func (q *Queries) GetSpecificOrder(ctx context.Context, usrID sql.NullInt64) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, getSpecificOrder, usrID)
	var i CustomerOrder
	err := row.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT customer_order_id, created_at, usr_id FROM customer_order
ORDER BY customer_order_id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]CustomerOrder, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerOrder
	for rows.Next() {
		var i CustomerOrder
		if err := rows.Scan(&i.CustomerOrderID, &i.CreatedAt, &i.UsrID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
