// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orderItem.sql

package db

import (
	"context"
	"database/sql"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_item  (
              quantity, price_per_item, product_variant_id, customer_order_id
) VALUES (
             $1 , $2 , $3 , $4
         )
RETURNING order_item_id, created_at, quantity, price_per_item, product_variant_id, customer_order_id
`

type CreateOrderItemParams struct {
	Quantity         sql.NullInt32 `json:"quantity"`
	PricePerItem     string        `json:"price_per_item"`
	ProductVariantID sql.NullInt64 `json:"product_variant_id"`
	CustomerOrderID  sql.NullInt64 `json:"customer_order_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.Quantity,
		arg.PricePerItem,
		arg.ProductVariantID,
		arg.CustomerOrderID,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.CreatedAt,
		&i.Quantity,
		&i.PricePerItem,
		&i.ProductVariantID,
		&i.CustomerOrderID,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_item
WHERE order_item_id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, orderItemID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, orderItemID)
	return err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT order_item_id, created_at, quantity, price_per_item, product_variant_id, customer_order_id FROM order_item
ORDER BY customer_order_id, product_variant_id
LIMIT $1
OFFSET $2
`

type ListOrderItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderItems(ctx context.Context, arg ListOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.CreatedAt,
			&i.Quantity,
			&i.PricePerItem,
			&i.ProductVariantID,
			&i.CustomerOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrderItemsForSpecificCustomerOrder = `-- name: ListOrderItemsForSpecificCustomerOrder :many
SELECT order_item_id, created_at, quantity, price_per_item, product_variant_id, customer_order_id FROM order_item
WHERE customer_order_id = $1
ORDER BY product_variant_id
LIMIT $2
OFFSET $3
`

type ListOrderItemsForSpecificCustomerOrderParams struct {
	CustomerOrderID sql.NullInt64 `json:"customer_order_id"`
	Limit           int32         `json:"limit"`
	Offset          int32         `json:"offset"`
}

func (q *Queries) ListOrderItemsForSpecificCustomerOrder(ctx context.Context, arg ListOrderItemsForSpecificCustomerOrderParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItemsForSpecificCustomerOrder, arg.CustomerOrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.CreatedAt,
			&i.Quantity,
			&i.PricePerItem,
			&i.ProductVariantID,
			&i.CustomerOrderID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
