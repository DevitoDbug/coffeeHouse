// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rating.sql

package db

import (
	"context"
	"database/sql"
)

const createRating = `-- name: CreateRating :one
INSERT INTO "rating" (
    rating_value, pd_id, usr_id
) VALUES (
             $1 , $2 , $3
         )
RETURNING rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id
`

type CreateRatingParams struct {
	RatingValue sql.NullString `json:"rating_value"`
	PdID        sql.NullInt64  `json:"pd_id"`
	UsrID       sql.NullInt64  `json:"usr_id"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating, arg.RatingValue, arg.PdID, arg.UsrID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :one
DELETE FROM "rating" WHERE rating_id = $1 RETURNING rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id
`

func (q *Queries) DeleteRating(ctx context.Context, ratingID int64) (Rating, error) {
	row := q.db.QueryRowContext(ctx, deleteRating, ratingID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const deleteRatingTemporarily = `-- name: DeleteRatingTemporarily :one
UPDATE "rating"
SET deleted_at = now()
WHERE rating_id = $1 AND deleted_at IS NULL
RETURNING  rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id
`

func (q *Queries) DeleteRatingTemporarily(ctx context.Context, ratingID int64) (Rating, error) {
	row := q.db.QueryRowContext(ctx, deleteRatingTemporarily, ratingID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const listRating = `-- name: ListRating :many
SELECT rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id FROM "rating"
WHERE deleted_at IS NULL
ORDER BY pd_id
LIMIT $1
OFFSET $2
`

type ListRatingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRating(ctx context.Context, arg ListRatingParams) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRating, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.RatingID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.RatingValue,
			&i.PdID,
			&i.UsrID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numberOfProductRating = `-- name: NumberOfProductRating :one
SELECT COUNT(rating_value) as number_of_ratting
FROM rating
WHERE pd_id = $1
`

func (q *Queries) NumberOfProductRating(ctx context.Context, pdID sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, numberOfProductRating, pdID)
	var number_of_ratting int64
	err := row.Scan(&number_of_ratting)
	return number_of_ratting, err
}

const productRating = `-- name: ProductRating :many
SELECT AVG(rating_value) as average_value
FROM rating
WHERE pd_id = $1 AND deleted_at IS NULL
`

func (q *Queries) ProductRating(ctx context.Context, pdID sql.NullInt64) ([]float64, error) {
	rows, err := q.db.QueryContext(ctx, productRating, pdID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []float64
	for rows.Next() {
		var average_value float64
		if err := rows.Scan(&average_value); err != nil {
			return nil, err
		}
		items = append(items, average_value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreRating = `-- name: RestoreRating :one
UPDATE "rating"
SET deleted_at = NULL
WHERE rating_id = $1 AND deleted_at IS NOT NULL
RETURNING  rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id
`

func (q *Queries) RestoreRating(ctx context.Context, ratingID int64) (Rating, error) {
	row := q.db.QueryRowContext(ctx, restoreRating, ratingID)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}

const updateRatingValue = `-- name: UpdateRatingValue :one
UPDATE "rating"
SET rating_value = $3, updated_at = now()
WHERE usr_id = $1 AND pd_id= $2 AND deleted_at IS NULL
RETURNING  rating_id, created_at, updated_at, deleted_at, rating_value, pd_id, usr_id
`

type UpdateRatingValueParams struct {
	UsrID       sql.NullInt64  `json:"usr_id"`
	PdID        sql.NullInt64  `json:"pd_id"`
	RatingValue sql.NullString `json:"rating_value"`
}

func (q *Queries) UpdateRatingValue(ctx context.Context, arg UpdateRatingValueParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, updateRatingValue, arg.UsrID, arg.PdID, arg.RatingValue)
	var i Rating
	err := row.Scan(
		&i.RatingID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RatingValue,
		&i.PdID,
		&i.UsrID,
	)
	return i, err
}
