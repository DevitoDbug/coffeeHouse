// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: attribute.sql

package db

import (
	"context"
	"database/sql"
)

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO "attribute" (
    att_value, abbreviations
) VALUES (
             $1 , $2
         )
RETURNING att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

type CreateAttributeParams struct {
	AttValue      sql.NullString `json:"att_value"`
	Abbreviations sql.NullString `json:"abbreviations"`
}

func (q *Queries) CreateAttribute(ctx context.Context, arg CreateAttributeParams) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, createAttribute, arg.AttValue, arg.Abbreviations)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}

const deleteAttribute = `-- name: DeleteAttribute :one
DELETE FROM "attribute" WHERE att_id = $1 RETURNING att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

func (q *Queries) DeleteAttribute(ctx context.Context, attID int64) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, deleteAttribute, attID)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}

const deleteAttributeTemporarily = `-- name: DeleteAttributeTemporarily :one
UPDATE "attribute"
SET deleted_at = now()
WHERE att_id = $1 AND deleted_at IS NULL
RETURNING  att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

func (q *Queries) DeleteAttributeTemporarily(ctx context.Context, attID int64) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, deleteAttributeTemporarily, attID)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}

const listAttribute = `-- name: ListAttribute :many
SELECT att_id, created_at, updated_at, deleted_at, att_value, abbreviations FROM "attribute"
WHERE deleted_at IS NULL
ORDER BY att_id
LIMIT $1
OFFSET $2
`

type ListAttributeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAttribute(ctx context.Context, arg ListAttributeParams) ([]Attribute, error) {
	rows, err := q.db.QueryContext(ctx, listAttribute, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(
			&i.AttID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.AttValue,
			&i.Abbreviations,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreAttribute = `-- name: RestoreAttribute :one
UPDATE "attribute"
SET deleted_at = NULL
WHERE att_id = $1 AND deleted_at IS NOT NULL
RETURNING  att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

func (q *Queries) RestoreAttribute(ctx context.Context, attID int64) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, restoreAttribute, attID)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}

const updateAbbreviations = `-- name: UpdateAbbreviations :one
UPDATE "attribute"
SET abbreviations = $2, updated_at = now()
WHERE att_id = $1 AND deleted_at IS NULL
RETURNING  att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

type UpdateAbbreviationsParams struct {
	AttID         int64          `json:"att_id"`
	Abbreviations sql.NullString `json:"abbreviations"`
}

func (q *Queries) UpdateAbbreviations(ctx context.Context, arg UpdateAbbreviationsParams) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, updateAbbreviations, arg.AttID, arg.Abbreviations)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}

const updateAttValue = `-- name: UpdateAttValue :one
UPDATE "attribute"
SET att_value = $2, updated_at = now()
WHERE att_id = $1 AND deleted_at IS NULL
RETURNING  att_id, created_at, updated_at, deleted_at, att_value, abbreviations
`

type UpdateAttValueParams struct {
	AttID    int64          `json:"att_id"`
	AttValue sql.NullString `json:"att_value"`
}

func (q *Queries) UpdateAttValue(ctx context.Context, arg UpdateAttValueParams) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, updateAttValue, arg.AttID, arg.AttValue)
	var i Attribute
	err := row.Scan(
		&i.AttID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttValue,
		&i.Abbreviations,
	)
	return i, err
}
